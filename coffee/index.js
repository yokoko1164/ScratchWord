// Generated by CoffeeScript 1.7.1
var REBIRTHTIME, TIME, VIEWCOUNT, addRecord, answerArray, bonusPoint, calculateScore, clickCount, clickLevel, countDown, countStart, createAnswer, exitGame, imageArray, initQuiz, initScore, initText, isExistNumber, judgeAnswer, newQuiz, newRecord, numberArray, point, quizCount, randomNumber, rebirthTime, recordStorage, rejectMatch, reportScore, restTouch, scratchCount, selectMatch, selectString, setLevel, showAnswer, showLeaderboard, sliceString, sliceWordArray, sortMatch, stageCount, takeImage, takeScratchImage, time, timer, volume, word, wordImagesArray;

imageArray = [];

word = 0;

VIEWCOUNT = 19;

scratchCount = 25;

quizCount = wordArray4.length - 1;

TIME = 20;

time = TIME;

timer = 0;

restTouch = 50;

clickCount = 0;

clickLevel = 0;

point = 0;

stageCount = 0;

REBIRTHTIME = 300;

rebirthTime = REBIRTHTIME;

volume = 1;

bonusPoint = [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30];

sliceWordArray = [];

numberArray = [];

wordImagesArray = [];

answerArray = [];

newRecord = localStorage.getItem('record');

recordStorage = function() {
  var record;
  record = localStorage.getItem('record');
  if (point > record) {
    localStorage.setItem('record', point);
    newRecord = localStorage.getItem('record');
    return reportScore();
  }
};

addRecord = function() {
  if (newRecord) {
    return $('#record .count').text("" + newRecord + " pt");
  }
};

selectString = function(array) {
  var random;
  random = _.random(quizCount);
  return word = array[random][0];
};

isExistNumber = function(array, value) {
  return _.include(array, value);
};

randomNumber = function(array) {
  var random;
  random = _.random(VIEWCOUNT);
  if (!isExistNumber(array, random)) {
    return array.push(random);
  } else {
    return randomNumber(numberArray);
  }
};

sliceString = function(word) {
  var i, _i, _ref, _results;
  _results = [];
  for (i = _i = 0, _ref = word.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(sliceWordArray.push(word.slice(i, i + 1)));
  }
  return _results;
};

takeImage = function(array) {
  var key, randomString, string, _results;
  _results = [];
  for (key in array) {
    string = array[key][0];
    randomNumber(numberArray);
    if (stageCount <= 10) {
      _results.push($('#back_image div').eq(numberArray[key]).removeClass().addClass("sprite-lower_" + string));
    } else {
      randomString = _.random(1);
      if (randomString === 0) {
        $('#back_image div').eq(numberArray[key]).removeClass().addClass("sprite-capital_" + string);
      }
      if (randomString === 1) {
        _results.push($('#back_image div').eq(numberArray[key]).removeClass().addClass("sprite-lower_" + string));
      } else {
        _results.push(void 0);
      }
    }
  }
  return _results;
};

takeScratchImage = function() {
  var random;
  random = _.random(0, 7);
  return $('#scratch div').css('background-image', "url(" + scratchImageAraay[random] + ")");
};

selectMatch = function() {
  var getMatch, i, key1, key2, matchArray, rejectArray, shuffleArray, sliceArray, _i, _ref;
  matchArray = wordArray4;
  for (i = _i = 0, _ref = wordArray4.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    matchArray[i][1] = 0;
  }
  for (key1 in sliceWordArray) {
    for (key2 in matchArray) {
      getMatch = matchArray[key2][0].indexOf(sliceWordArray[key1]);
      if (getMatch >= 0) {
        matchArray[key2][1]++;
      }
    }
  }
  rejectArray = rejectMatch(matchArray);
  sortMatch(rejectArray);
  sliceArray = rejectArray.slice(0, 11);
  shuffleArray = _.shuffle(sliceArray);
  return answerArray = shuffleArray.slice(0, 5);
};

rejectMatch = function(array) {
  return _.reject(array, function(num) {
    return num[1] >= word.length;
  });
};

sortMatch = function(array) {
  return array.sort(function(a, b) {
    return b[1] - a[1];
  });
};

createAnswer = function() {
  return answerArray.push([word, 0]);
};

showAnswer = function(array) {
  var i, viewAnswer, _i, _results;
  viewAnswer = _.shuffle(array);
  _results = [];
  for (i = _i = 0; _i <= 5; i = ++_i) {
    _results.push($('#select div').eq(i).text("" + viewAnswer[i][0]));
  }
  return _results;
};

countStart = function() {
  return timer = setInterval(countDown, 1000);
};

countDown = function() {
  time--;
  if (time <= 5) {
    $('#timer .count').css('color', 'red').text(time);
  } else {
    $('#timer .count').css('color', 'white').text(time);
  }
  if (time < 1) {
    restTouch -= 1;
    $('#rest .count').text(restTouch);
    $('#rest #change').text('-1').css('color', 'red').animate({
      opacity: 1,
      queue: false
    }, 'fast').animate({
      opacity: 0
    }, 'slow');
    time = TIME;
  }
  if (restTouch <= 0) {
    return exitGame();
  }
};

judgeAnswer = function(value) {
  if (word === value) {
    setLevel(clickCount);
    calculateScore(clickLevel);
    if (0 === stageCount % 10) {
      restTouch += 15;
      $('#rest #change').text('+10').css('color', 'blue').animate({
        opacity: 1,
        queue: false
      }, 100).animate({
        opacity: 0
      }, 1000);
    } else {
      restTouch += 5;
      $('#rest #change').text('+5').css('color', 'blue').animate({
        opacity: 1,
        queue: false
      }, 100).animate({
        opacity: 0
      }, 1000);
    }
    $('#point #score').text("+" + bonusPoint[clickLevel]).css('color', 'blue').animate({
      opacity: 1,
      queue: false
    }, 100).animate({
      opacity: 0
    }, 1000);
    $('#point .count').text(point);
    $('#rest .count').text(restTouch);
    if (rebirthTime > 0) {
      rebirthTime -= 5;
    }
    newQuiz();
    takeScratchImage();
    return time = TIME;
  } else {
    restTouch -= 10;
    $('#overlay_false').fadeIn(100).fadeOut(100);
    $('#rest #change').text('-10').css('color', 'red').animate({
      opacity: 1
    }, 1).animate({
      opacity: 0
    }, 100);
    $('#rest .count').text(restTouch);
    if (restTouch <= 0) {
      restTouch = 0;
      $('#rest .count').text(restTouch);
      if (restTouch <= 0) {
        return exitGame();
      }
    }
  }
};

newQuiz = function() {
  stageCount++;
  initQuiz();
  selectString(wordArray4);
  sliceString(word);
  takeImage(sliceWordArray);
  selectMatch();
  createAnswer();
  return showAnswer(answerArray);
};

initQuiz = function() {
  var i, _i, _j, _k;
  for (i = _i = 0; 0 <= scratchCount ? _i < scratchCount : _i > scratchCount; i = 0 <= scratchCount ? ++_i : --_i) {
    $('#scratch div').eq(i).fadeIn(rebirthTime);
  }
  for (i = _j = 0; _j <= 5; i = ++_j) {
    $('#select div').eq(i).text('');
  }
  for (i = _k = 0; 0 <= VIEWCOUNT ? _k <= VIEWCOUNT : _k >= VIEWCOUNT; i = 0 <= VIEWCOUNT ? ++_k : --_k) {
    if (!$('#back_image div').eq(i).hasClass('sprite_0')) {
      $('#back_image div').eq(i).removeClass().addClass('sprite_0');
    }
  }
  sliceWordArray.length = 0;
  numberArray.length = 0;
  wordImagesArray.length = 0;
  answerArray.length = 0;
  return clickCount = 0;
};

calculateScore = function(value) {
  if (value === 0) {
    return point += bonusPoint[value];
  } else if (value === 1) {
    return point += bonusPoint[value];
  } else if (value === 2) {
    return point += bonusPoint[value];
  } else if (value === 3) {
    return point += bonusPoint[value];
  } else if (value === 4) {
    return point += bonusPoint[value];
  } else {
    return point += bonusPoint[value];
  }
};

setLevel = function(value) {
  if ((25 >= value && value > 20)) {
    return clickLevel = 0;
  } else if ((18 >= value && value > 16)) {
    return clickLevel = 1;
  } else if ((16 >= value && value > 14)) {
    return clickLevel = 2;
  } else if ((14 >= value && value > 12)) {
    return clickLevel = 3;
  } else if ((12 >= value && value > 10)) {
    return clickLevel = 4;
  } else if ((10 >= value && value >= 8)) {
    return clickLevel = 5;
  } else if ((8 >= value && value >= 6)) {
    return clickLevel = 6;
  } else if ((6 >= value && value >= 4)) {
    return clickLevel = 7;
  } else if ((4 >= value && value >= 2)) {
    return clickLevel = 8;
  } else if ((2 >= value && value >= 0)) {
    return clickLevel = 9;
  } else {
    return clickLevel = 0;
  }
};

exitGame = function() {
  clearInterval(timer);
  return $('#overlay').fadeIn('slow');
};

initScore = function() {
  time = TIME;
  restTouch = 50;
  clickCount = 0;
  clickLevel = 0;
  point = 0;
  stageCount = 0;
  return initText();
};

initText = function() {
  $('#rest .count').text(restTouch);
  $('#timer .count').css('color', 'black').text(time);
  return $('#point .count').text(point);
};

showLeaderboard = function() {
  return GameCenter.prototype.showLeaderboard('scratchWord_rank');
};

reportScore = function() {
  GameCenter.prototype.reportScore('scratchWord_rank', newRecord);
  return setTimeout('showLeaderboard()', 2000);
};

$(function() {
  var areaHeight, areaSize, areaWidth;
  areaWidth = screen.width;
  areaHeight = screen.height - (20 + 50 + 13);
  areaSize = areaWidth + areaHeight;
  $('#touch_area').css({
    'width': '320px',
    'height': areaHeight
  });
  addRecord();
  initText();
  $('#container_topStart').bind('touchstart', function() {
    $('#container_topStart').fadeOut('slow');
    return $('#container_start').delay(600).fadeIn('slow');
  });
  $('#start').bind('touchstart', function() {
    newQuiz();
    takeScratchImage();
    time = TIME;
    $('#container_start').fadeOut('fast');
    $('#container_game').delay(400).fadeIn('slow');
    return countStart();
  });
  $('#ranking').bind('touchstart', function() {
    return showLeaderboard();
  });
  $('#pass div').bind('touchstart', function() {
    newQuiz();
    return stageCount--;
  });
  $('#overlay #close').bind('touchstart', function() {
    $('#overlay').fadeOut('slow');
    $('#container_game').fadeOut('slow');
    $('#countQuestion .count').text(stageCount);
    $('#finalScore .count').text(point);
    $('#container_end').delay(400).fadeIn('slow');
    return recordStorage();
  });
  $('#restart').bind('touchstart', function() {
    initScore();
    $('#container_end').fadeOut('fast');
    $('#container_start').delay(400).fadeIn('slow');
    return addRecord();
  });
  $('.scratch').bind('touchstart', function() {
    $(this).fadeOut('100');
    clickCount++;
    restTouch--;
    $('#rest .count').text(restTouch);
    $('#rest #change').text('-1').css('color', 'red').animate({
      opacity: 1,
      queue: false
    }, 1).animate({
      opacity: 0
    }, 100);
    if (restTouch <= 0) {
      return exitGame();
    }
  });
  return $('#select div').bind('touchstart', function() {
    var touchWord;
    touchWord = $(this).text();
    return judgeAnswer(touchWord);
  });
});
